A Promise in JavaScript is a special object that represents the outcome of an asynchronous operation. It can be in one of three states: pending (still running), fulfilled (successfully completed), or rejected (encountered an error). Promises provide a way to handle the result of an asynchronous task by attaching functions that will be executed once the task is complete.

Example:
Imagine you want to fetch data from a server asynchronously. Using Promises, you can structure your code like this:

const fetchData = new Promise((resolve, reject) => {
  // Simulate fetching data from a server after 2 seconds
  setTimeout(() => {
    const data = { id: 1, name: 'John' };
    resolve(data); // Data fetched successfully
    // If there was an error, you would call "reject(error)"
  }, 2000);
});

fetchData.then(result => {
  console.log('Fetched data:', result);
}).catch(error => {
  console.error('Error fetching data:', error);
});



// Promise :

let complete = true;

let prom = new Promise(function(resolve , reject){
  if(complete){
    resolve("I am successfull.");
  }
  else{
    reject("I am failed");
  }
}) ;

let onFulfilment = (result) =>{ console.log(result)}
let onRejection = (error) =>{ console.log(error)}

console.log(prom );   // Promise { 'I am successfull.' }

// This are inbuilt function of Promises
prom.then(onFulfilment);   // I am successfull.
prom.catch(onRejection);   
